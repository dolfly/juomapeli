#!/usr/bin/env python
# 
# Juomapeli
# 
# Written by Heikki Orsila <heikki.orsila@iki.fi>
# 
# web site: http://zakalwe.fi/~shd/foss/juomapeli/
# source repository: git-clone git://zakalwe.fi/juomapeli.git

import os
import random
import sys
import time
import getopt

def error_exit(msg):
    sys.stderr.write(msg)
    sys.exit(1)


class Juomapeli:
    def __init__(self):
        self.all_interval = None
        self.drinking_interval = None
        self.drinkers = []
        self.drinking_weights = []
        self.drinks_per_round = 1
        self.moderate_drinking = False
        self.sample_file = 'yksi_kekkonen.wav'

        self.counter = 0
        self.drinks = {}

    def random_drinker(self):
        s = 0.0
        r = random.random()
        drinker = None

        for i in xrange(len(self.drinking_weights)):
            s += self.drinking_weights[i]
            if s >= r:
                drinker = self.drinkers[i]
                break

        if drinker == None:
            drinker = self.drinkers[-1]

        return drinker


    def play_sample(self):
        if self.sample_file != None:
            os.system('aplay "%s" 2>/dev/null' %(self.sample_file))


    def game(self):
        self.counter = 0

        while True:
            drink = False
            everyone = False

            if random.random() < 1 / self.drinking_interval:
                drink = True
        
            if self.all_interval != None and random.random() < 1 / self.all_interval:
                drink = True
                everyone = True

            if drink:
                self.counter += 1

                if everyone:
                    winners = ['Everyone']

                    for drinker in self.drinkers:
                        amount = self.drinks.get(drinker, 0)
                        self.drinks[drinker] = amount + 1

                else:
                    winners = []

                    i = 0
                    while i < self.drinks_per_round:
                        drinker = self.random_drinker()

                        if self.moderate_drinking and drinker in winners:
                            continue

                        winners.append(drinker)
                        amount = self.drinks.get(drinker, 0)
                        self.drinks[drinker] = amount + 1

                        i += 1

                # Print winners of the round
                if len(winners) == 1:
                    sys.stdout.write('%s drinks\n' %(winners[0]))
                else:
                    i = 0
                    for winner in winners:
                        if i == (len(winners) - 1):
                            sys.stdout.write('and %s ' %(winner))
                        elif i == (len(winners) - 2):
                            sys.stdout.write('%s ' %(winner))
                        else:
                            sys.stdout.write('%s, ' %(winner))
                        i += 1
                    sys.stdout.write('drink\n')

                self.play_sample()

            time.sleep(1.0)


def usage():
    sys.stdout.write("""Juomapeli written by Heikki Orsila <heikki.orsila@iki.fi>
    
SYNTAX:

    juomapeli [--all=t] [--drinks=n] [--moderate] [--no-sound] [--sample=f]
              INTERVAL drinker1 drinker2 ...

INTRODUCTION:

Juomapeli is a drinking game. One must specify INTERVAL and one or more
drinkers for the game. Drinking happens at random times, but in average, one
drinking round in INTERVAL seconds. The number of drinks per round can be
set by "--drinks=n" option. One may specify special weights for drinkers
if someone is either too sober or an expert in drinking. For example, one
may specify bob and kirk:2 as drinkers, meaning that kirk gets twice as
many chances compared to bob.

OPTIONS:

-a t, --all=t     Everyone drinks on the same round every t seconds on average
-d n, --drinks=n  Specify number of drinks per round
-m, --moderate    If --drinks was used, this option denies a drinker getting
                  two drinks on the same round
-n, --no-sound    No sound
-s f, --sample=f  Use f (wav file) as the drinking sample

EXAMPLE: One person drinks once in 5 seconds on average. Everyone drinks once
         in 60 seconds on average

 juomapeli --all=60 5 arto heikki joonas jouni markku tomas
""")


game = Juomapeli()

if len(sys.argv) == 1:
    usage()
    sys.exit(1)


shortopts = 'a:d:hmnbs:'
longopts = ['help', 'all=', 'drinks=', 'moderate', 'no-sound', 'sample=']
try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], shortopts, longopts)
except getopt.GetoptError, e:
    error_exit(str(e) + '\n')


for opt, arg in opts:
    if opt == '-a' or opt == '--all':
        try:
            game.all_interval = float(arg)
        except:
            game.all_interval = 0.0

        if game.all_interval <= 1.0:
            error_exit('ALL interval must be a value larger than 1.0 seconds\n')

    # The number of drinks per round
    elif opt == '-d' or opt == '--drinks':
        try:
            game.drinks_per_round = int(arg)
        except:
            game.drinks_per_round = 0

        if game.drinks_per_round <= 0:
            error_exit('Drinks must be an integer value larger than zero\n')
        continue

    elif opt == '-h' or opt == '--help':
        usage()
        sys.exit(0)


    elif opt == '-m' or opt == '--moderate':
        game.moderate_drinking = True

    elif opt == '-n' or opt == '--no-sound':
        game.sample_file = None

    elif opt == '-s' or opt == '--sample':
        if arg == None:
            error_exit('Please provide a sample file\n')

        try:
            f = open(arg)
        except:
            error_exit('Unable to open sample file %s\n' %(arg))

        f.close()

        game.sample_file = arg

    else:
        error_exit('Unknown option %s\n' %(opt))


if len(args) == 0:
    error_exit('Please provide the drinking time interval (seconds)\n')

try:
    game.drinking_interval = float(args[0])
except:
    game.drinking_interval = 0.0

if game.drinking_interval <= 1.0:
    error_exit('Please provide a positive value greater than 1 as the drinking interval\n')

for drinker in args[1:]:
    fields = drinker.split(':')

    if len(fields) > 2:
        error_exit('Proper drinker syntax is NAME or NAME:WEIGHT\n')

    name = fields[0]

    weight = 1.0
    if len(fields) == 2:
        try:
            weight = float(fields[1])
        except:
            weight = 0.0

        if weight <= 0.0:
            error_exit('Drinker weight %s should be a positive value' %(fields[1]))

    game.drinkers.append(name)
    game.drinking_weights.append(weight)


if len(game.drinkers) == 0:
    error_exit('Please give names of one or more drinkers\n')

if game.moderate_drinking == True and len(game.drinkers) < game.drinks_per_round:
    error_exit('Moderate drinking can only be used when the number of drinkers is at least as great as the number of drinks per round\n')

# Calculate probability mass for drinkers
pmass = sum(game.drinking_weights)
game.drinking_weights = map(lambda x: x / pmass, game.drinking_weights)

try:
    game.game()
except KeyboardInterrupt:
    pass

survivors = []

for drinker in game.drinkers:
    amount = game.drinks.get(drinker, 0)
    if amount == 0:
        survivors.append(amount)

sys.stdout.write('\n\n\n')

if len(survivors) == 0:
    sys.stdout.write('Everyone passed out. ')

sys.stdout.write('The game lasted only %d rounds...\n\n' %(game.counter))

game.drinkers.sort()
for drinker in game.drinkers:
    amount = game.drinks.get(drinker, 0)
    if amount == 0:
        sys.stdout.write('%s is a loser\n' %(drinker))
    elif amount == 1:
        sys.stdout.write('%s got only 1 sip\n' %(drinker))
    else:
        sys.stdout.write('%s drank %d times\n' %(drinker, amount))
